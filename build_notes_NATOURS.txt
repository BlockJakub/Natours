

 1. HADING h1 is IMPORTANT FOR GOOGLE or for nay other SEARCH ENGINES to figure out what our web page is about.

 2. THE values of  polygon(x y, x y, x y, x y) X starts from left to right, Y starts from top down
    clip-path: polygon(0 0, 100% 0, 100% 78%, 0 100%);

 3. positioning TRANSFOROM: TRANSLATE(x, y);
    .text-box {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    /* !!! BECAUSE of declared positions in the css. 
    Without the transform:translate(-50%, -50%) the .text-box class WOULD BE SHIFTED HALF 50% down and right. */

 4. ANIMATION, TRANSORM: TRANSLATE(x, y);
    Means the element moves in x and y directions. The we have animation-titming-function: ease-in(ease-in-out, linear, step-start, cubic-bezier(0.1, 0.7, 1.0, 0.1), steps(4, end), frames(10))
    When we do the animation sometimes can be shaky. So we need use backface-visibility: hidden;
    It provide us to not shake with the animated element.

    To use the animation again for different element we just write the animation: moveInLeft 1s ease-in; It will use the moveInLeft keyframes with speed 1s and ease-in.

5. PSEUDO - ELEMENTS and PSEUDO - CLASSES (HOW and WHY TO USE THE ::after PSEUDO-ELEMENT) example how to use creative hover effect using the transition property.

   .btn:link,
   .btn:visited ARE the status of btn link, btn visited(these are states when you hover over the elementsbutton or anchor)

   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   !!!! display: inline-block; Is inline block we use when we need ad aditional spacing padding around the element !!!!!!!
   ðŸ“Œ Why Use inline-block?
      âœ” Allows padding & margins to work properly.
      âœ” Allows elements to sit side by side (unlike block, which forces a new line).
      âœ” Works well with text-align: center; on the parent.
    ðŸ”¥ How It Works
            The child is inline-block, so it stays inline but allows spacing.
            text-align: center; on the parent makes the child align horizontally centered.
    âœ… So yes! inline-block is perfect when you need padding & want to center elements with text-align: center;! ðŸš€ðŸ˜ƒ   
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   !!! box-shadow: offset in the X direction, Y offset direction, blur, color rgba();
   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 


======================================================================================================================
-=====================================================================================================================
6. !!! THREE PILARS OF WRITE GOOD HTML AND CSS !!!!! 
    A. RESPONSIVE DESIGN = Fluid Layouts
                         = Media Queries
                         = Responsive Images
                         = Correct Units
                         = Desktop-firsrt vs Mobile-firsrt


    B. MAINTAINABLE AND SCALABLE CODE = Clean
                                      = Easy-to-understand
                                      = Growth
                                      = Reusable
                                      = How to organize files
                                      = How to name CLASSES
                                      = How to structure HTML
    
    C. WEB PERFORMANCE = Less HTTP requests (the user nedd download less data)
                       = Less CODE
                       = Compress CODE
                       = Use a CSS preprocessor
                       = Use Less images (use only neccessary images for our we site)
                       = Compress images (less bandwith dor user) 

============================================================================================================
============================================================================================================

7. WHAT HAPPEND TO CSS WHEN WE LOAD UP A WEBPAGE ON THE BROWSER WHEN USER OPENS THE PAGE?
      A. Laod HTML ----> Parse HTML ------------------------>  Document Object MODEL (DOM)  --------------->|
                            |                                                                               |
                            |                                                                               |
                            |               PARSE CSS                                                       |
                        Load CSS  -----> Resolve conflicting                                                |
                                         CSS declarations (cascade)                                         |
                                         ===========================   ---->  CSS Object Model              |
                                         Process final CSS values           (CSSOM = CSS Object Model)----->|
                                                                                                            |
                                                                                                            |
                                                                                                            |
                          FINAL RENDERED <-------------------  Website rendering:       <----------------- RENDER TREE
                            WEBSITE                        The visual formatting model
=================================================================================================================
==================================================================================================================

8. SPECIFICITY IMPORTANCE
      A. Inline styles
      B. IDs
      C. Classes, pseudo-classes, attribute
      D. Elements, pseudo-elements
    - So we calculate these (Inline, IDs, Classes, Elements).
    - If all specificity is equal then the last decleration will be understand

9. UNIT VALUES 








===============================================================================================
===============================================================================================
*********** INSTAL SASS in CMD BY NODEjs ******************************
===============================================================================================
===============================================================================================
ðŸš€ Complete Guide: Setting Up Sass to Watch SCSS Files in a New Project
===============================================================================================
   --If you're starting a new project and want to use Sass to compile and watch your SCSS files, follow this step-by-step guide.

ðŸ”¹ Step 1: Initialize a New Project (If Not Done Yet)
   If you haven't already, create a new project folder and set up npm:
    CMD 
      mkdir my-sass-project
      cd my-sass-project
      npm init -y  # Creates a package.json file
      This will generate a package.json file to manage your project's dependencies.

ðŸ”¹ Step 2: Install Sass
   Instead of node-sass (which is deprecated), install the latest sass package:
     CMD
      npm install sass --save-dev
      This will add sass as a development dependency in package.json.

ðŸ”¹ Step 3: Create Your Project Structure
     Inside your project folder, create the following structure:

         YOUR ROOT FOLDER
         my-sass-project/
         â”‚â”€â”€ src/
         â”‚   â”œâ”€â”€ scss/
         â”‚   â”‚   â”œâ”€â”€ main.scss  (Your main SCSS file)
         â”‚â”€â”€ dist/
         â”‚   â”œâ”€â”€ css/ (Compiled CSS files will go here)
         â”‚â”€â”€ package.json
         Run this command to create the necessary folders and files quickly:
    
      CMD 
         mkdir -p src/scss dist/css
         echo "// Your SCSS code here" > src/scss/main.scss

ðŸ”¹ Step 4: Set Up a Watch Command
      To automatically compile SCSS to CSS whenever you make changes, add this script in your package.json:

      Open package.json and find the "scripts" section. Replace it with:

         IN json Copy Edit
            "scripts": {
              "sass": "sass src/scss/main.scss dist/css/main.css",
              "watch": "sass --watch src/scss/main.scss:dist/css/main.css"
            }

ðŸ”¹ Step 5: Start Watching for Changes
      Run the following command to automatically compile your SCSS every time you save a file:

      CMD 
         npm run watch
      This will:
      âœ… Watch src/scss/main.scss
      âœ… Compile it into dist/css/main.css whenever changes are detected

ðŸ”¹ Step 6: Write Some SCSS and Test
      Open src/scss/main.scss and add some test styles: TO TEST IF THE WATCH SASS WORKS?
         SCSS file
            $primary-color: #3498db;

            body {
              background-color: $primary-color;
              font-family: Arial, sans-serif;
            }
            
            h1 {
              color: white;
              text-align: center;
            }
         Save the file, and Sass will automatically compile it into dist/css/main.css.

ðŸŽ¯ Final Tips
If you want to compile multiple SCSS files, you can run:

sh
Copy
Edit
sass --watch src/scss:dist/css
This will compile all .scss files in src/scss into dist/css.

If you ever want to stop watching, press CTRL + C in your terminal.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
IN THIS CASE I HAVE USED MY SETTINGS
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    package.json file
         {
  "name": "natours",
  "version": "1.0.0",
  "description": "Landing page for Natours - A project from Jonas Schmedtmann's Udemy course.",
  "main": "index.js",
  "scripts": {
    "sass": "sass --watch sass/main.scss:css/style.css",
    "live-server": "live-server",
    "start": "npm-run-all --parallel sass live-server"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/YourUsername/natours.git"
  },
  "keywords": [
    "travel",
    "landing-page",
    "sass",
    "css",
    "html"
  ],
  "author": "Jonas Schmedtmann (Course Instructor) | Modified by Kuba",
  "license": "MIT",
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "concat": "^1.0.3",
    "node-sass": "^9.0.0",
    "npm-run-all": "^4.1.5",
    "postcss-cli": "^11.0.0",
    "sass": "^1.85.1"
  }
}          

   I START WATCH SASS with COMMAND "npm start" in CMD and all in one(sass + live-server) start working  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ðŸŽ‰ Done!
Now your project is set up with Sass watching your SCSS files and compiling them to CSS automatically! ðŸš€

Let me know if you have any questions! ðŸ˜ƒ

END OF SASS SETUP IN NODE AND CMD
=========================================================================================================
=========================================================================================================










************************
SLECTING COLUMNS
************************
[class^="col-"] { 
   /* Selects all classes that START with "col-" */
}
[class^="col-"] { /* Styles apply (select the class elements) to elements with classes like "col-1", "col-2-of-3" */}
=====================================================================================================================

[class$="-col"] { 
   /* Selects all classes that END with "-col" */
}
[class$="-col"] { /* Styles apply (select the class elements) to elements with classes like "big-col", "small-col" */}
======================================================================================================================

[class*="col-"] { 
   /* Selects all classes that CONTAIN "col-" anywhere */
}
[class*="col-"] { /* Styles apply (select the class elements) to elements with classes like "col-1-of-3", "flex-col-responsive" */}
=======================================================================================================================

[class="col-1-of-2"] { 
   /* Selects elements with EXACTLY this class */
}
=======================================================================================================================

[class~="col-1-of-2"] {
   /* Matches if "col-1-of-2" is a whole class name (or one of many classes) */
} 
            SUMMARY
   When to Use These?
   ^= (Starts with) â†’ If your naming convention follows col-1, col-2, etc.
   $= (Ends with) â†’ Useful for suffix-based naming like -col
   *= (Contains) â†’ If the keyword col- appears anywhere in the class
   ~= (Whole word match) â†’ When working with multiple classes in the same attribute
   |= (Exact match or prefix with -) â†’ When class names use hyphen-separated prefixes 
=======================================================================================================================






*****************************************************************************************************
                              ***************************
*****************************************************************************************************
                             GRID GRID GRID GRID
=====================================================================================================
*****************************************************************************************************
// _grid.scss

.row {
    max-width: $grid-width; // it means if smaller than 114 rem it will fill the available space
    background-color: #23c232;
    margin: 0 auto;

    &:not(:last-child) {
        // &:not(:last-child) means select everything and NOT the last child
        margin-bottom: $gutter-vertical;
    }

    @include clearfix;

    [class^="col-"] {
        background-color: orangered;
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;
        }
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }

    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    .col-2-of-4 {
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }
    .col-3-of-4 {
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }
}

***************************************************************************************************
                              ****************************************
====================================================================================================
  
  
  
  
  
  ============================  .COMPOSITION  =====================================


